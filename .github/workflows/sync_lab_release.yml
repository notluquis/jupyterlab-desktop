name: Check for new JupyterLab releases

on:
  schedule:
    - cron: 30 17 * * *
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  check_for_lab_updates:
    runs-on: macos-latest
    # En tu fork NO necesitas environment ni App token
    defaults:
      run:
        # needed for conda to work
        shell: bash -el {0}

    steps:
      # Usa el GITHUB_TOKEN por defecto (persist-credentials: true)
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Install hub
        run: |
          brew install hub

      - name: Set up Git identity (bot)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install tbump

      - name: 'Get latest JupyterLab version'
        uses: actions/github-script@v7
        id: get-latest-jupyterlab-version
        with:
          # En tu fork basta el GITHUB_TOKEN
          github-token: ${{ github.token }}
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: "jupyterlab",
              repo: "jupyterlab"
            })
            const latestRelease = releases.data.find(
              r => r.tag_name?.startsWith('v') && !(r.draft || r.prerelease)
            )
            return latestRelease ? latestRelease.tag_name.substring(1) : ''
          result-encoding: string

      - name: Check for new releases
        shell: bash
        run: |
          set -eux
          export LATEST=${{ steps.get-latest-jupyterlab-version.outputs.result }}
          echo "latest=${LATEST}" >> $GITHUB_ENV
          tbump --only-patch ${LATEST}-1 --non-interactive
          if [[ ! -z "$(git status --porcelain package.json)" ]]; then
            echo "update_available=true" >> $GITHUB_ENV
          fi

      - name: Install Node
        if: env.update_available == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Install npm dependencies
        if: env.update_available == 'true'
        run: |
          npm install --global yarn
          yarn install

      - uses: conda-incubator/setup-miniconda@v3
        if: env.update_available == 'true'
        with:
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: ""
          channels: conda-forge

      - name: Install conda dependencies
        if: env.update_available == 'true'
        run: conda install -c conda-forge conda conda-lock -y

      - name: Update conda lock files
        if: env.update_available == 'true'
        run: yarn update_conda_lock
      
      - name: Update binary sign list osx-64
        if: env.update_available == 'true'
        run: |
          yarn clean_env_installer && conda-lock install --no-validate-platform --prefix ./env_installer/jlab_server ./env_installer/conda-osx-64.lock
          yarn update_binary_sign_list --platform osx-64

      - name: Update binary sign list osx-arm64
        if: env.update_available == 'true'
        run: |
          yarn clean_env_installer && conda-lock install --no-validate-platform --prefix ./env_installer/jlab_server ./env_installer/conda-osx-arm64.lock
          yarn update_binary_sign_list --platform osx-arm64

      - name: Create a PR for the new version (fork mode)
        if: env.update_available == 'true'
        shell: bash
        env:
          # Hub usa GITHUB_TOKEN; aquÃ­ el del bot por defecto
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -eux
          export LATEST=${{ env.latest }}
          export BRANCH_NAME=update-to-v${LATEST}

          # Crea o reusa la rama sin fallar si ya existe
          git fetch origin "${BRANCH_NAME}" || true
          git checkout -B "${BRANCH_NAME}"

          git add -A
          if git diff --cached --quiet; then
            echo "No staged changes; nothing to commit."
          else
            git commit -m "Update to JupyterLab v${LATEST}"
          fi

          # Empuja como github-actions[bot] (tiene write en TU fork)
          git push --set-upstream origin "${BRANCH_NAME}"

          # Crea PR en tu fork (rama -> rama por defecto del fork)
          hub pull-request -m "Update to JupyterLab v${LATEST}" \
            -m "Automated update in fork."
